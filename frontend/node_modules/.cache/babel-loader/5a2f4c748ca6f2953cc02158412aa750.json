{"ast":null,"code":"const baseUrl = \"\";\n/**\n * Fetch protected API with current active JWT token.\n * @return !!! raw response\n */\n\nexport const fetchAPI = async function (method, data, params) {\n  for (var _len = arguments.length, path = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    path[_key - 3] = arguments[_key];\n  }\n\n  if (data === null || data === undefined) data = {};\n  if (params === null || params === undefined) params = {};\n  return new Promise((resolve, reject) => {\n    resolve(JSON.stringify(data));\n  }).then(dataStr => {\n    // Fetch RESTful resources\n    let url = baseUrl + \"/\" + path.join(\"/\");\n    let paramsKV = Object.entries(params);\n\n    if (paramsKV.length > 0) {\n      url += \"?\";\n      url += paramsKV.map(_ref => {\n        let [k, v] = _ref;\n        return k + \"=\" + v;\n      }).join(\"&\");\n    }\n\n    let config = method !== \"GET\" ? {\n      method: method,\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: dataStr,\n      credentials: \"include\"\n    } : {\n      method: method,\n      mode: \"cors\",\n      credentials: \"include\"\n    };\n    return fetch(url, config);\n  });\n};","map":{"version":3,"names":["baseUrl","fetchAPI","method","data","params","path","undefined","Promise","resolve","reject","JSON","stringify","then","dataStr","url","join","paramsKV","Object","entries","length","map","k","v","config","mode","headers","body","credentials","fetch"],"sources":["/Users/isabella/Documents/CPSC/Simp.Com/frontend/src/api/client.js"],"sourcesContent":["const baseUrl = \"\";\n\n/**\n * Fetch protected API with current active JWT token.\n * @return !!! raw response\n */\nexport const fetchAPI = async function (method, data, params, ...path) {\n  if (data === null || data === undefined) data = {};\n  if (params === null || params === undefined) params = {};\n\n  return new Promise((resolve, reject) => {\n    resolve(JSON.stringify(data));\n  }).then((dataStr) => {\n    // Fetch RESTful resources\n    let url = baseUrl + \"/\" + path.join(\"/\");\n    let paramsKV = Object.entries(params);\n    if (paramsKV.length > 0) {\n      url += \"?\";\n      url += paramsKV.map(([k, v]) => k + \"=\" + v).join(\"&\");\n    }\n    let config =\n      method !== \"GET\"\n        ? {\n            method: method,\n            mode: \"cors\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: dataStr,\n            credentials: \"include\",\n          }\n        : {\n            method: method,\n            mode: \"cors\",\n            credentials: \"include\",\n          };\n    return fetch(url, config);\n  });\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,EAAhB;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,gBAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,MAA9B,EAA+C;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EACrE,IAAIF,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKG,SAA9B,EAAyCH,IAAI,GAAG,EAAP;EACzC,IAAIC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKE,SAAlC,EAA6CF,MAAM,GAAG,EAAT;EAE7C,OAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtCD,OAAO,CAACE,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAD,CAAP;EACD,CAFM,EAEJS,IAFI,CAEEC,OAAD,IAAa;IACnB;IACA,IAAIC,GAAG,GAAGd,OAAO,GAAG,GAAV,GAAgBK,IAAI,CAACU,IAAL,CAAU,GAAV,CAA1B;IACA,IAAIC,QAAQ,GAAGC,MAAM,CAACC,OAAP,CAAed,MAAf,CAAf;;IACA,IAAIY,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;MACvBL,GAAG,IAAI,GAAP;MACAA,GAAG,IAAIE,QAAQ,CAACI,GAAT,CAAa;QAAA,IAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD;QAAA,OAAYD,CAAC,GAAG,GAAJ,GAAUC,CAAtB;MAAA,CAAb,EAAsCP,IAAtC,CAA2C,GAA3C,CAAP;IACD;;IACD,IAAIQ,MAAM,GACRrB,MAAM,KAAK,KAAX,GACI;MACEA,MAAM,EAAEA,MADV;MAEEsB,IAAI,EAAE,MAFR;MAGEC,OAAO,EAAE;QACP,gBAAgB;MADT,CAHX;MAMEC,IAAI,EAAEb,OANR;MAOEc,WAAW,EAAE;IAPf,CADJ,GAUI;MACEzB,MAAM,EAAEA,MADV;MAEEsB,IAAI,EAAE,MAFR;MAGEG,WAAW,EAAE;IAHf,CAXN;IAgBA,OAAOC,KAAK,CAACd,GAAD,EAAMS,MAAN,CAAZ;EACD,CA3BM,CAAP;AA4BD,CAhCM"},"metadata":{},"sourceType":"module"}