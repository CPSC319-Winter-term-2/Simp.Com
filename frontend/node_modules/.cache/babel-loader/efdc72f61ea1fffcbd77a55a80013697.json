{"ast":null,"code":"const login = async input => {\n  let response, data;\n\n  try {\n    response = await fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input)\n    });\n    data = await response.json();\n\n    if (!response.ok) {\n      return {\n        status: response.status,\n        error: data.errors\n      };\n    }\n\n    return data;\n  } catch (err) {\n    console.log(err);\n    return {\n      status: response.status,\n      error: data.errors\n    };\n  }\n};\n\nconst googlelogin = async input => {\n  let response, data;\n\n  try {\n    response = await fetch(\"/googlelogin\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input)\n    });\n    data = await response.json();\n\n    if (!response.ok) {\n      return {\n        status: response.status,\n        error: data.errors\n      };\n    }\n\n    return data;\n  } catch (err) {\n    return {\n      status: response.status,\n      error: data.errors\n    };\n  }\n};\n\nconst signup = async input => {\n  let response, data;\n\n  try {\n    response = await fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input)\n    });\n    data = await response.json();\n\n    if (!response.ok) {\n      return {\n        status: response.status,\n        error: data.errors\n      };\n    }\n\n    return {\n      status: response.status\n    };\n  } catch (err) {\n    return {\n      status: response.status,\n      error: data.errors\n    };\n  }\n};\n\nconst getUser = async () => {\n  let response, data;\n\n  try {\n    response = await fetch(\"/login\", {\n      method: \"GET\",\n      credentials: \"include\"\n    });\n    data = await response.json();\n\n    if (!response.ok) {\n      return response.status;\n    }\n\n    return {\n      data,\n      statusCode: response.status\n    };\n  } catch (err) {\n    return {\n      status: response.status,\n      error: data.errors\n    };\n  }\n};\n\nconst logOutUser = async () => {\n  const response = await fetch(\"/logout\", {\n    method: \"GET\",\n    credentials: \"include\"\n  });\n  return response.json();\n};\n\nexport default {\n  login,\n  getUser,\n  logOutUser,\n  signup,\n  googlelogin\n};","map":{"version":3,"names":["login","input","response","data","fetch","method","headers","credentials","body","JSON","stringify","json","ok","status","error","errors","err","console","log","googlelogin","signup","getUser","statusCode","logOutUser"],"sources":["/Users/isabella/Documents/CPSC/Simp.Com/frontend/src/controller/login/service.js"],"sourcesContent":["const login = async (input) => {\n  let response, data;\n  try {\n    response = await fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input),\n    });\n\n    data = await response.json();\n    if (!response.ok) {\n      return { status: response.status, error: data.errors };\n    }\n    return data;\n  } catch (err) {\n    console.log(err);\n    return { status: response.status, error: data.errors };\n  }\n};\nconst googlelogin = async (input) => {\n  let response, data;\n  try {\n    response = await fetch(\"/googlelogin\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input),\n    });\n\n    data = await response.json();\n    if (!response.ok) {\n      return { status: response.status, error: data.errors };\n    }\n    return data;\n  } catch (err) {\n    return { status: response.status, error: data.errors };\n  }\n};\nconst signup = async (input) => {\n  let response, data;\n  try {\n    response = await fetch(\"/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      credentials: \"include\",\n      body: JSON.stringify(input),\n    });\n    data = await response.json();\n    if (!response.ok) {\n      return { status: response.status, error: data.errors };\n    }\n    return { status: response.status };\n  } catch (err) {\n    return { status: response.status, error: data.errors };\n  }\n};\nconst getUser = async () => {\n  let response, data;\n  try {\n    response = await fetch(\"/login\", {\n      method: \"GET\",\n      credentials: \"include\",\n    });\n    data = await response.json();\n    if (!response.ok) {\n      return response.status;\n    }\n\n    return { data, statusCode: response.status };\n  } catch (err) {\n    return { status: response.status, error: data.errors };\n  }\n};\n\nconst logOutUser = async () => {\n  const response = await fetch(\"/logout\", {\n    method: \"GET\",\n    credentials: \"include\",\n  });\n\n  return response.json();\n};\n\nexport default {\n  login,\n  getUser,\n  logOutUser,\n  signup,\n  googlelogin,\n};\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAOC,KAAP,IAAiB;EAC7B,IAAIC,QAAJ,EAAcC,IAAd;;EACA,IAAI;IACFD,QAAQ,GAAG,MAAME,KAAK,CAAC,QAAD,EAAW;MAC/BC,MAAM,EAAE,MADuB;MAE/BC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFsB;MAK/BC,WAAW,EAAE,SALkB;MAM/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,KAAf;IANyB,CAAX,CAAtB;IASAE,IAAI,GAAG,MAAMD,QAAQ,CAACS,IAAT,EAAb;;IACA,IAAI,CAACT,QAAQ,CAACU,EAAd,EAAkB;MAChB,OAAO;QAAEC,MAAM,EAAEX,QAAQ,CAACW,MAAnB;QAA2BC,KAAK,EAAEX,IAAI,CAACY;MAAvC,CAAP;IACD;;IACD,OAAOZ,IAAP;EACD,CAfD,CAeE,OAAOa,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;IACA,OAAO;MAAEH,MAAM,EAAEX,QAAQ,CAACW,MAAnB;MAA2BC,KAAK,EAAEX,IAAI,CAACY;IAAvC,CAAP;EACD;AACF,CArBD;;AAsBA,MAAMI,WAAW,GAAG,MAAOlB,KAAP,IAAiB;EACnC,IAAIC,QAAJ,EAAcC,IAAd;;EACA,IAAI;IACFD,QAAQ,GAAG,MAAME,KAAK,CAAC,cAAD,EAAiB;MACrCC,MAAM,EAAE,MAD6B;MAErCC,OAAO,EAAE;QACP,gBAAgB;MADT,CAF4B;MAKrCC,WAAW,EAAE,SALwB;MAMrCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,KAAf;IAN+B,CAAjB,CAAtB;IASAE,IAAI,GAAG,MAAMD,QAAQ,CAACS,IAAT,EAAb;;IACA,IAAI,CAACT,QAAQ,CAACU,EAAd,EAAkB;MAChB,OAAO;QAAEC,MAAM,EAAEX,QAAQ,CAACW,MAAnB;QAA2BC,KAAK,EAAEX,IAAI,CAACY;MAAvC,CAAP;IACD;;IACD,OAAOZ,IAAP;EACD,CAfD,CAeE,OAAOa,GAAP,EAAY;IACZ,OAAO;MAAEH,MAAM,EAAEX,QAAQ,CAACW,MAAnB;MAA2BC,KAAK,EAAEX,IAAI,CAACY;IAAvC,CAAP;EACD;AACF,CApBD;;AAqBA,MAAMK,MAAM,GAAG,MAAOnB,KAAP,IAAiB;EAC9B,IAAIC,QAAJ,EAAcC,IAAd;;EACA,IAAI;IACFD,QAAQ,GAAG,MAAME,KAAK,CAAC,SAAD,EAAY;MAChCC,MAAM,EAAE,MADwB;MAEhCC,OAAO,EAAE;QACP,gBAAgB;MADT,CAFuB;MAKhCC,WAAW,EAAE,SALmB;MAMhCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,KAAf;IAN0B,CAAZ,CAAtB;IAQAE,IAAI,GAAG,MAAMD,QAAQ,CAACS,IAAT,EAAb;;IACA,IAAI,CAACT,QAAQ,CAACU,EAAd,EAAkB;MAChB,OAAO;QAAEC,MAAM,EAAEX,QAAQ,CAACW,MAAnB;QAA2BC,KAAK,EAAEX,IAAI,CAACY;MAAvC,CAAP;IACD;;IACD,OAAO;MAAEF,MAAM,EAAEX,QAAQ,CAACW;IAAnB,CAAP;EACD,CAdD,CAcE,OAAOG,GAAP,EAAY;IACZ,OAAO;MAAEH,MAAM,EAAEX,QAAQ,CAACW,MAAnB;MAA2BC,KAAK,EAAEX,IAAI,CAACY;IAAvC,CAAP;EACD;AACF,CAnBD;;AAoBA,MAAMM,OAAO,GAAG,YAAY;EAC1B,IAAInB,QAAJ,EAAcC,IAAd;;EACA,IAAI;IACFD,QAAQ,GAAG,MAAME,KAAK,CAAC,QAAD,EAAW;MAC/BC,MAAM,EAAE,KADuB;MAE/BE,WAAW,EAAE;IAFkB,CAAX,CAAtB;IAIAJ,IAAI,GAAG,MAAMD,QAAQ,CAACS,IAAT,EAAb;;IACA,IAAI,CAACT,QAAQ,CAACU,EAAd,EAAkB;MAChB,OAAOV,QAAQ,CAACW,MAAhB;IACD;;IAED,OAAO;MAAEV,IAAF;MAAQmB,UAAU,EAAEpB,QAAQ,CAACW;IAA7B,CAAP;EACD,CAXD,CAWE,OAAOG,GAAP,EAAY;IACZ,OAAO;MAAEH,MAAM,EAAEX,QAAQ,CAACW,MAAnB;MAA2BC,KAAK,EAAEX,IAAI,CAACY;IAAvC,CAAP;EACD;AACF,CAhBD;;AAkBA,MAAMQ,UAAU,GAAG,YAAY;EAC7B,MAAMrB,QAAQ,GAAG,MAAME,KAAK,CAAC,SAAD,EAAY;IACtCC,MAAM,EAAE,KAD8B;IAEtCE,WAAW,EAAE;EAFyB,CAAZ,CAA5B;EAKA,OAAOL,QAAQ,CAACS,IAAT,EAAP;AACD,CAPD;;AASA,eAAe;EACbX,KADa;EAEbqB,OAFa;EAGbE,UAHa;EAIbH,MAJa;EAKbD;AALa,CAAf"},"metadata":{},"sourceType":"module"}